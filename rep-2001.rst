REP: 2001
Title: ROS Bouncy and Newer Variants
Author: Tully Foote <tfoote@openrobotics.org>, Mikael Arguedas <mikael@openrobotics.org>, Ruffin White <roxfoxpox@gmail.com>
Status: Active
Type: Informational
Content-Type: text/x-rst
Created: 16-Jul-2018
Post-History: 17-Sep-2018, 15-Mar-2019


Abstract
========

This REP describes the variants for the ROS Bouncy release and for releases that follow until otherwise replaced by a similar update REP.


Motivation
==========

For a discussion on the general motivation and role of variants,
please see REP 108 [1]_.

This document covers the common variants used for recommended
installations.
It is expressed in the ros2/variants repository on github.com [2]_.

The definitions in this REP are concise for clearer purpose, and do not list all transitive dependencies explicitly.


Specification
=============

End-user entry points
---------------------

We define three main entry points for ROS users.

 * desktop (recommended)
 * ros_base
 * ros_core

Variants
--------

ROS Core
''''''''

The `ros_core` variants composes the core communication protocols.
It may not contain any GUI dependencies.

::

 - ros_core:
      packages: [ament_cmake, ament_cmake_ros, ament_index, ament_lint,
                 ament_package, class_loader, common_interfaces,
                 console_bridge_vendor, google_benchmark_vendor, googletest,
                 launch, launch_ros, libstatistics_collector, libyaml_vendor,
                 mimick_vendor, osrf_pycommon, osrf_testing_tools_cpp,
                 performance_test_fixture, pluginlib, pybind11_vendor,
                 python_cmake_module, rcl, rclcpp, rcl_interfaces, rcl_logging,
                 rclpy, rcpputils, rcutils, rmw, rmw_dds_common,
                 rmw_implementation, ros2cli, ros2cli_common_extensions,
                 ros2_tracing, ros_environment, rosidl, rosidl_defaults,
                 rosidl_python, rosidl_runtime_py, rosidl_typesupport,
                 ros_testing, rpyutils, spdlog_vendor, sros2,
                 test_interface_files, tinyxml2_vendor, uncrustify_vendor,
                 unique_identifier_msgs]
      And at least one of the following rmw_implementation:
      - Cyclone DDS: [cyclonedds, iceoryx, rmw_cyclonedds]
      - Connext: [Fast-CDR, Fast-DDS, foonathan_memory_vendor, rmw_connextdds,
                  rosidl_typesupport_fastrtps]
      - Fast-DDS: [Fast-CDR, Fast-DDS, foonathan_memory_vendor, rmw_fastrtps,
                   rosidl_typesupport_fastrtps]


ROS Base
''''''''

The `ros_base` metapackage composes the `ros_core` metapackage with
commonly used libraries.
It may not contain any GUI dependencies.

::

  - ros_base:
      extends: [ros_core]
      packages: [eigen3_cmake_module, geometry2, kdl_parser, message_filters,
                 orocos_kinematics_dynamics, rclcpp, robot_state_publisher,
                 rosbag2, tinyxml_vendor, urdf, urdfdom, urdfdom_headers,
                 yaml_cpp_vendor]


Desktop variants
''''''''''''''''

The `desktop` metapackage is the main entry point for users.
It provides all commonly used libraries as well as visualization tools and tutorials.

::

  - desktop:
      extends: [ros_base]
      packages: [angles, demos, depthimage_to_laserscan, example_interfaces,
                 examples, image_common, interactive_markers, joystick_drivers,
                 laser_geometry, navigation_msgs, pcl_msgs, perception_pcl,
                 python_qt_binding, qt_gui_core, realtime_support,
                 resource_retriever, ros_tutorials, rqt, rqt_action, rqt_bag,
                 rqt_common_plugins, rqt_console, rqt_graph, rqt_image_view,
                 rqt_msg, rqt_plot, rqt_publisher, rqt_py_console,
                 rqt_reconfigure, rqt_service_caller, rqt_shell, rqt_srv,
                 rqt_top, rqt_topic, rviz, tango_icons_vendor, teleop_twist_joy,
                 teleop_twist_keyboard, tlsf, vision_opencv]


Institution-specific and robot-specific
'''''''''''''''''''''''''''''''''''''''

Please see REP 108 [1]_ for discussion of institution-specific
metapackages.

When creating robot or institution specific metapackages consider
using the \*_robot and \*_desktop and \*_base form where * is the
institution or robot name.

An institution is not required to provide a metapackage, they are
mainly provided for convenience and identity.


References
==========

.. [1] REP 108: Diamondback Variants
   (http://www.ros.org/reps/rep-0108.html)

.. [2] ROS Variants Repository
   (https://github.com/ros2/variants)


Copyright
=========

This document has been placed in the public domain.


..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
